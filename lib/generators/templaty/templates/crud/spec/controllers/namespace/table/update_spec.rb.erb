<%- data = Templaty::Helper.data_for(options) -%>
<%- data_as_hash_string_formatted = Templaty::Helper.data_as_hash_string(data, value_attribute: :formatted) -%>
<%- data_as_hash_string_raw = Templaty::Helper.data_as_hash_string(data, value_attribute: :raw) -%>
<%- fields = Templaty::Helper.fields(options) -%>
<%- fields_presence = Templaty::Helper.fields_presence(options) -%>
<%- model_name = options[:table].singularize -%>
# frozen_string_literal: true

require 'support/factory_bot'
require 'support/shared/logged'

RSpec.describe <%= options[:namespace].classify %>::<%= options[:table].classify.pluralize %>Controller, '#update' do
  context 'when unlogged' do
    it 'redirects' do
      patch :update, params: { id: 0 }

      expect(response.status).to be(302)
    end
  end

  context 'when logged' do
    include_context 'when_logged', permissions: [['<%= options[:namespace] %>/<%= options[:table] %>', :update]], with_plan: true

    let!(:<%= model_name %>) do
      create(:<%= model_name %>, <%= data_as_hash_string_raw %>, unit: current_unit)
    end

    let!(:parameters) do
      { <%= data_as_hash_string_formatted %> }
    end

    context 'when fail' do
      before { parameters[:<%= fields_presence.first %>] = nil }

      it 'assigns record' do
        patch :update, params: { id: <%= model_name %>, <%= model_name %>: parameters }

        expect(assigns(:<%= model_name %>)).to eq(<%= model_name %>)
      end

      it 'does not update the record the fields value' do
        expect { patch :update, params: { id: <%= model_name %>, <%= model_name %>: parameters } }.not_to change(<%= model_name %>, :<%= fields_presence.first %>)
      end

      it 're-renders page' do
        patch :update, params: { id: <%= model_name %>, <%= model_name %>: parameters }

        expect(response).to render_template(:edit)
      end
    end

    context 'when success' do
      it 'assigns record' do
        patch :update, params: { id: <%= model_name %>, <%= model_name %>: parameters }

        expect(assigns(:<%= model_name %>)).to eq(<%= model_name %>)
      end

      it 'updates the record' do
        patch :update, params: { id: <%= model_name %>, <%= model_name %>: parameters }

        <%= model_name %>.reload

        <%- fields.sort.each do |field| -%>
        expect(<%= model_name %>.<%= field %>).to <%= Templaty::Helper.rspec_matcher(data.dig(field, :raw)) %>
        <%- end -%>
      end

      it 'redirects' do
        patch :update, params: { id: <%= model_name %>, <%= model_name %>: parameters }

        expect(response).to redirect_to(<%= options[:namespace] %>_<%= options[:table] %>_url)
      end

      it 'flashes' do
        patch :update, params: { id: <%= model_name %>, <%= model_name %>: parameters }

        expect(flash[:info]).to eq('<%= options[:name_one].capitalize %> <%= Templaty::Helper.i18n_updated(options) %> com sucesso.')
      end
    end
  end
end
