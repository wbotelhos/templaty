<%- ignore_actions = Templaty::Helper.values(options, :ignore_actions) -%>
<%- only = %w[destroy edit update] - ignore_actions -%>
# frozen_string_literal: true

module <%= options[:namespace].classify %>
  class <%= options[:table].classify.pluralize %>Controller < <%= options[:namespace].classify %>::BaseController
    before_action :authorizy
    before_action :assign_record, only: %i[<%= only.join(' ') %>]

    <%- unless ignore_actions.include?('create') -%>
    def create
      @<%= options[:table].singularize %>         = <%= options[:table].classify%>.new(create_params)
      @<%= options[:table].singularize %>.unit_id = session[:current_unit_id]

      if @<%= options[:table].singularize %>.save
        redirect_to <%= options[:namespace] %>_<%= options[:table] %>_url, info: t('.success')
      else
        render :new
      end
    end

    <%- end -%>
    <%- unless ignore_actions.include?('destroy') -%>
    def destroy
      if @<%= options[:table].singularize %>.destroy
        redirect_to <%= options[:namespace] %>_<%= options[:table] %>_url, info: t('.success')
      else
        render :edit
      end
    end

    <%- end -%>
    <%- unless ignore_actions.include?('edit') -%>
    def edit; end

    <%- end -%>
    <%- unless ignore_actions.include?('gridy') -%>
    def gridy
      lister = Lister
               .new(self, params)
               .init
               .select(%i[id <%= Templaty::Helper.fields(options).sort.join(' ') %>])
               .where(unit_id: session[:current_unit_id])

      @items = lister.items
      @total = lister.total
    end

    <%- end -%>
    <%- unless ignore_actions.include?('index') -%>
    def index; end

    <%- end -%>
    <%- unless ignore_actions.include?('new') -%>
    def new
      @<%= options[:table].singularize %> = <%= options[:table].classify%>.new
    end

    <%- end -%>

    <%- unless ignore_actions.include?('update') -%>
    def update
      if @<%= options[:table].singularize %>.update(update_params)
        redirect_to <%= options[:namespace] %>_<%= options[:table] %>_url, info: t('.success')
      else
        render :edit
      end
    end

    <%- end -%>
    private

    <%- unless only.empty? -%>
    def assign_record
      @<%= options[:table].singularize %> = <%= options[:table].classify%>.where(unit_id: session[:current_unit_id]).findy(params[:id])

      redirect_to <%= options[:namespace] %>_<%= options[:table] %>_url, info: t('.not_found') unless @<%= options[:table].singularize %>
    end

    <%- end -%>
    <%- unless ignore_actions.include?('create') -%>
    def create_params
      params.require(:<%= options[:table].singularize %>).permit(<%= Templaty::Helper.fields(options).sort.map { |field| ":#{field}" }.join(', ') %>)
    end

    <%- end -%>
    <%- unless ignore_actions.include?('update') -%>
    def update_params
      params.require(:<%= options[:table].singularize %>).permit(<%= Templaty::Helper.fields(options).sort.map { |field| ":#{field}" }.join(', ') %>)
    end
    <%- end -%>
  end
end
